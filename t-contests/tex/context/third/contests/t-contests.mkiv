% A ConTeXt MkIV module

% from file: conclusion.tex after line: 0

%C Copyright 2019 PerceptiSys Ltd (Stephen Gaito)
%C
%C Permission is hereby granted, free of charge, to any person
%C obtaining a copy of this software and associated documentation
%C files (the "Software"), to deal in the Software without
%C restriction, including without limitation the rights to use,
%C copy, modify, merge, publish, distribute, sublicense, and/or sell
%C copies of the Software, and to permit persons to whom the
%C Software is furnished to do so, subject to the following
%C conditions:
%C
%C    The above copyright notice and this permission notice shall
%C    be included in all copies or substantial portions of the
%C    Software.
%C
%C THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%C EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
%C OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%C NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
%C HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
%C WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
%C FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
%C OTHER DEALINGS IN THE SOFTWARE.

% from file: preamble.tex after line: 0

%D \module
%D   [     file=t-contests,
%D      version=2017.05.10,
%D        title=\CONTEXT\ User module,
%D     subtitle=Unit testing for \ConTeXt\,
%D       author=Stephen Gaito,
%D         date=\currentdate,
%D    copyright=PerceptiSys Ltd (Stephen Gaito),
%D        email=stephen@perceptisys.co.uk,
%D      license=MIT License]

% begin info
%
% title   : JoyLoL CoAlgebra definitions
% comment : Provides structured document and code generation
% status  : under development, mkiv only
%
% end info

% from file: preamble.tex after line: 0

\usemodule[literate-progs]

\unprotect

\ctxloadluafile{t-contests}
\ctxloadluafile{t-contests-templates}

% from file: testSuites.tex after line: 0

\def\startTestSuite[#1]{
  \subsubsection[title=Test Suite: #1]
  \directlua{thirddata.contests.startTestSuite("#1")}
}

\def\stopTestSuite{
  %\stopsubsubsection%
  \directlua{thirddata.contests.stopTestSuite()}
}

% from file: testSuites.tex after line: 100

\def\startTestCase[#1]{
  \starttextrule{Test case}
  \noindent {\tfa #1} \godown[2ex]
  \directlua{thirddata.contests.startTestCase("#1")}
}

\def\stopTestCase{
  \directlua{thirddata.contests.stopTestCase()}
  \stoptextrule%
}

\def\skipTestCase{
  \directlua{thirddata.contests.skipTestCase()}
  \stoptextrule%
}

\def\ignoreTestCase{
  \directlua{thirddata.contests.ignoreTestCase()}
  \stoptextrule%
}

% from file: testSuites.tex after line: 250

\def\reportFailures{
  \directlua{thirddata.contests.reportFailures()}
}

% from file: testSuites.tex after line: 300

\def\reportMkIVStats{
  \directlua{thirddata.contests.reportStats('mkiv')}
}

\def\reportLuaStats{
  \directlua{thirddata.contests.reportStats('lua')}
}

% from file: mkivTests.tex after line: 0

\definetyping[ConTest]
\setuptyping[ConTest][option=context]

\let\oldStopConTest=\stopConTest
\def\stopConTest{
  \oldStopConTest%
  \directlua{thirddata.contests.addConTest('_typing_')}
}

% from file: mkivTests.tex after line: 100

\def\assertionFailed#1#2{
  \directlua{thirddata.contests.reportMkIVAssertion(false, '#1', '#2')}
}

\def\assertionSucceeded#1{
  \directlua{thirddata.contests.reportMkIVAssertion(true, '#1', '')}
}

% from file: mkivTests.tex after line: 150

\def\startAssertShouldFail#1#2#3{
  \directlua{thirddata.contests.mkivAssertShouldFail('#1', '#2', '#3')}
}

\def\stopAssertShouldFail{\relax}

% from file: mkivTests.tex after line: 250

\def\assertFail#1{\assertionFailed{#1}{(Failed)}}

% from file: mkivTests.tex after line: 250

\def\assertSucceed#1{\assertionSucceeded{#1}}

% from file: mkivTests.tex after line: 300

\def\assertDefined#1#2{
  \expandafter\ifx\csname#1\endcsname\relax%
    \assertionFailed{#2}{Expected #1 to be defined}%
  \else%
    \assertionSucceeded{#2}{}%
  \fi
}

% from file: mkivTests.tex after line: 300

\def\assertNotDefined#1#2{
  \expandafter\ifx\csname#1\endcsname\relax%
    \assertionSucceeded{#2}%
  \else%
    \assertionFailed{#2}{Expected #1 to not be defined}%
  \fi
}

% from file: mkivTests.tex after line: 350

\def\assertStringMatches#1#2#3{
  \edef\aString{#1}
  \directlua{
    thirddata.contests.reportMkIVAssertion(
      string.match('\aString','#2'),
      '#3',
      'Expected [\aString] to match [#2]'
    )
  }
}

% from file: mkivTests.tex after line: 400

\def\assertStringDoesNotMatch#1#2#3{
  \edef\aString{#1}
  \directlua{
    thirddata.contests.reportMkIVAssertion(
      not string.match('\aString','#2'),
      '#3',
      'Expected [\aString] to not match [#2]'
    )
  }
}

% from file: mkivTests.tex after line: 450

\def\assertFirstArgument#1{
  \iffirstargument%
    \assertionSucceeded{#1}%
  \else%
    \assertionFailed{#1}{Expected a first argument}%
  \fi
}

% from file: mkivTests.tex after line: 450

\def\assertNoFirstArgument#1{
  \iffirstargument%
    \assertionFailed{#1}{Expected no first argument}%
  \else%
    \assertionSucceeded{#1}%
  \fi
}

% from file: mkivTests.tex after line: 500

\def\assertSecondArgument#1{
  \ifsecondargument%
    \assertionSucceeded{#1}%
  \else%
    \assertionFailed{#1}{Expected a second argument}%
  \fi
}

% from file: mkivTests.tex after line: 550

\def\assertNoSecondArgument#1{
  \ifsecondargument%
    \assertionFailed{#1}{Expected no second argument}%
  \else%
    \assertionSucceeded{#1}%
  \fi
}

% from file: mkivTests.tex after line: 600

\def\assertThirdArgument#1{
  \ifthirdargument%
    \assertionSucceeded{#1}%
  \else%
    \assertionFailed{#1}{Expected a third argument}%
  \fi
}

% from file: mkivTests.tex after line: 650

\def\assertNoThirdArgument#1{
  \ifthirdargument%
    \assertionFailed{#1}{Expected no third argument}%
  \else%
    \assertionSucceeded{#1}%
  \fi
}

% from file: mkivTests.tex after line: 700

\def\clearAllExpansionInfo{
  \directlua{
    thirddata.contests.clearAllExpansionInfo()
  }
}

% from file: mkivTests.tex after line: 750

\def\clearExpansionInfoFor#1{
  \directlua{
    thirddata.contests.clearExpansionInfoFor('#1')
  }
}

% from file: mkivTests.tex after line: 750

\def\startLoggingExpansions{
  \directlua{thirddata.contests.setExpansionLogging(true)}
}

\def\stopLoggingExpansions{
  \directlua{thirddata.contests.setExpansionLogging(false)}
}

\def\logMessage#1{
  \writestatus{contests}{#1}#1\\
}

% from file: mkivTests.tex after line: 850

\def\addMockResult#1#2{
  \directlua{
    thirddata.contests.addMockResult('#1', '#2')
  }
}

% from file: mkivTests.tex after line: 900

\def\traceTexMacro#1#2{
  \directlua{
    thirddata.contests.createMacro('#1', #2, 'tex', 'trace')
  }
}

\def\traceContextMacro#1#2{
  \directlua{
    thirddata.contests.createMacro('#1', #2, 'context', 'trace')
  }
}

\def\mockTexMacro#1#2{
  \directlua{
    thirddata.contests.createMacro('#1', #2, 'tex', 'mock')
  }
}

\def\mockContextMacro#1#2{
  \directlua{
    thirddata.contests.createMacro('#1', #2, 'context', 'mock')
  }
}

% from file: mkivTests.tex after line: 1250

\def\assertMacroExpanded#1#2{
  \directlua{
    thirddata.contests.assertMacroExpanded('#1', 1, '#2')
  }
}

\def\assertMacroNeverExpanded#1#2{
  \directlua{
    thirddata.contests.assertMacroNeverExpanded('#1', 1, '#2')
  }
}

\def\assertMacroExpandedNTimes#1#2#3{
  \directlua{
    thirddata.contests.assertMacroExpanded('#1', #2, '#3')
  }
}

\def\assertMacroNeverExpandedNTimes#1#2#3{
  \directlua{
    thirddata.contests.assertMacroNeverExpanded('#1', #2, '#3')
  }
}

% from file: mkivTests.tex after line: 1350

\def\assertMacroNthArgumentOnMthExpansionMatches#1#2#3#4#5{
  \directlua{
    thirddata.contests.assertMacroArguments(
      '#1', #3, #2, '#4', '#5'
    )
  }
}

% from file: mkivTests.tex after line: 1500

\def\mockErrMessage{
  \mockTexMacro{errmessage}{1}
}
\def\assertErrorThrown#1{
  \assertMacroExpanded{errmessage}{#1}
}

% from file: luaTests.tex after line: 0

\def\showLuaValue#1#2{
  \directlua{
    thirddata.contests.showValue(#1, '#2')
  }
}

% from file: luaTests.tex after line: 0

\definetyping[LuaTest]
\setuptyping[LuaTest][option=lua]

\let\oldStopLuaTest=\stopLuaTest
\def\stopLuaTest{
  \oldStopLuaTest%
  \directlua{thirddata.contests.addLuaTest('_typing_')}
}

\def\showLuaTest{
  \directlua{thirddata.contests.showLuaTest()}
}

% from file: luaTests.tex after line: 200

\appendtoks
  \setevalue{\e!get\currentbuffer Name}{\currentdefinedbuffer}%
\to \everydefinebuffer

\definebuffer[LuaConTest]

\def\stopLuaConTest{
  \directlua{thirddata.contests.runLuaConTest('\getLuaConTestName')}
}

% from file: cTests.tex after line: 0

\definetyping[CTest]
\setuptyping[CTest][option=cpp]

\let\oldStopCTest=\stopCTest
\def\stopCTest{
  \oldStopCTest%
  \directlua{thirddata.contests.addCTest('_typing_')}
}

\def\setCTestStage#1#2{
  \directlua{
    thirddata.contests.setCTestStage('#1', '#2')
  }
}

\def\CTestsMethodSetup{
  \setCTestStage{Methods}{Setup}
}

\def\CTestsMethodTeardown{
  \setCTestStage{Methods}{Teardown}
}

\def\CTestsSetup{
  \setCTestStage{Global}{Setup}
}

\def\CTestsTeardown{
  \setCTestStage{Global}{Teardown}
}

\def\CTestsSuiteSetup{
  \setCTestStage{TestSuite}{Setup}
}

\def\CTestsSuiteTeardown{
  \setCTestStage{TestSuite}{Teardown}
}

\def\setCTestStream#1{
  \directlua{
    thirddata.contests.setCTestStream('#1')
  }
}

\def\addCTestInclude#1{
  \directlua{
    thirddata.contests.addCTestInclude('#1')
  }
}

\def\addCTestLibDir#1{
  \directlua{
    thirddata.contests.addCTestLibDir('#1')
  }
}

\def\addCTestLib#1{
  \directlua{
    thirddata.contests.addCTestLib('#1')
  }
}

\def\addCTestMITLicense#1#2{
  \directlua{
    thirddata.contests.addCTestMITLicense('#1', '#2')
  }
}

\def\addCTestApacheLicense#1#2{
  \directlua{
    thirddata.contests.addCTestApacheLicense('#1', '#2')
  }
}

\def\createCTestFile#1#2#3{
  \directlua{
    thirddata.contests.createCTestFile('#1', '#2', '#3')
  }
}

\def\addCTestTargets#1{
  \directlua{
    thirddata.contests.addCTestTargets('#1')
  }
}

% from file: conclusion.tex after line: 0

\protect \endinput

