% A ConTeXt MkIV module

% from file: preamble.tex after line: 0

%D \module
%D   [     file=t-contests,
%D      version=2017.05.10,
%D        title=\CONTEXT\ User module,
%D     subtitle=Unit testing for \ConTeXt\,
%D       author=Stephen Gaito,
%D         date=\currentdate,
%D    copyright=PerceptiSys Ltd (Stephen Gaito),
%D        email=stephen@perceptisys.co.uk,
%D      license=MIT License]

%C Copyright (C) 2017 PerceptiSys Ltd (Stephen Gaito)
%C
%C Permission is hereby granted, free of charge, to any person obtaining a
%C copy of this software and associated documentation files (the
%C "Software"), to deal in the Software without restriction, including
%C without limitation the rights to use, copy, modify, merge, publish,
%C distribute, sublicense, and/or sell copies of the Software, and to
%C permit persons to whom the Software is furnished to do so, subject to
%C the following conditions:
%C
%C The above copyright notice and this permission notice shall be included
%C in all copies or substantial portions of the Software.
%C
%C THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
%C OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
%C MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
%C IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
%C CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
%C TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
%C SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

% begin info
%
% title   : JoyLoL CoAlgebra definitions
% comment : Provides structured document and code generation
% status  : under development, mkiv only
%
% end info

\usemodule[literate-progs]

\unprotect

\ctxloadluafile{t-contests}
\ctxloadluafile{t-contests-templates}

% from file: testSuites.tex after line: 0

\def\startTestSuite[#1]{%
  \subsection[title=Test Suite: #1]
  \directlua{thirddata.contests.startTestSuite("#1")}
}

\def\stopTestSuite{%
  %\stopsubsection%
  \directlua{thirddata.contests.stopTestSuite()}
}

% from file: testSuites.tex after line: 100

\def\startTestCase[#1]{%
  \starttextrule{Test case}
  \noindent {\tfa #1} \godown[2ex]
  \directlua{thirddata.contests.startTestCase("#1")}
}

\def\stopTestCase{%
  \directlua{thirddata.contests.stopTestCase()}
  \stoptextrule%
}

\def\skipTestCase{%
  \directlua{thirddata.contests.skipTestCase()}
  \stoptextrule%
}

% from file: testSuites.tex after line: 200

\def\reportFailures{%
  \directlua{thirddata.contests.reportFailures()}
}

% from file: testSuites.tex after line: 250

\def\reportMkIVStats{%
  \directlua{thirddata.contests.reportStats('mkiv')}
}

\def\reportLuaStats{%
  \directlua{thirddata.contests.reportStats('lua')}
}

% from file: mkivTests.tex after line: 0

\definetyping[ConTest]
\setuptyping[ConTest][option=context]

\let\oldStopConTest=\stopConTest
\def\stopConTest{%
  \oldStopConTest%
  \directlua{thirddata.contests.addConTest('_typing_')}
}

% from file: mkivTests.tex after line: 50

\def\assertionFailed#1#2{%
  \directlua{thirddata.contests.reportMkIVAssertion(false, '#1', '#2')}
}

\def\assertionSucceeded#1{%
  \directlua{thirddata.contests.reportMkIVAssertion(true, '#1', '')}
}

% from file: mkivTests.tex after line: 150

\def\startAssertShouldFail#1#2#3{%
  \directlua{thirddata.contests.mkivAssertShouldFail('#1', '#2', '#3')}
}

\def\stopAssertShouldFail{\relax}

% from file: mkivTests.tex after line: 250

\def\assertFail#1{\assertionFailed{#1}{(Failed)}}

% from file: mkivTests.tex after line: 250

\def\assertSucceed#1{\assertionSucceeded{#1}}

% from file: mkivTests.tex after line: 300

\def\assertDefined#1#2{%
  \expandafter\ifx\csname#1\endcsname\relax%
    \assertionFailed{#2}{Expected #1 to be defined}%
  \else%
    \assertionSucceeded{#2}{}%
  \fi
}

% from file: mkivTests.tex after line: 300

\def\assertNotDefined#1#2{%
  \expandafter\ifx\csname#1\endcsname\relax%
    \assertionSucceeded{#2}%
  \else%
    \assertionFailed{#2}{Expected #1 to not be defined}%
  \fi
}

% from file: mkivTests.tex after line: 350

\def\assertStringMatches#1#2#3{%
  \edef\aString{#1}
  \directlua{
    thirddata.contests.reportMkIVAssertion(
      string.match('\aString','#2'),
      '#3',
      'Expected [\aString] to match [#2]'
    )
  }
}

% from file: mkivTests.tex after line: 400

\def\assertStringDoesNotMatch#1#2#3{%
  \edef\aString{#1}
  \directlua{
    thirddata.contests.reportMkIVAssertion(
      not string.match('\aString','#2'),
      '#3',
      'Expected [\aString] to not match [#2]'
    )
  }
}

% from file: mkivTests.tex after line: 400

\def\assertFirstArgument#1{%
  \iffirstargument%
    \assertionSucceeded{#1}%
  \else%
    \assertionFailed{#1}{Expected a first argument}%
  \fi
}

% from file: mkivTests.tex after line: 450

\def\assertNoFirstArgument#1{%
  \iffirstargument%
    \assertionFailed{#1}{Expected no first argument}%
  \else%
    \assertionSucceeded{#1}%
  \fi
}

% from file: mkivTests.tex after line: 500

\def\assertSecondArgument#1{%
  \ifsecondargument%
    \assertionSucceeded{#1}%
  \else%
    \assertionFailed{#1}{Expected a second argument}%
  \fi
}

% from file: mkivTests.tex after line: 550

\def\assertNoSecondArgument#1{%
  \ifsecondargument%
    \assertionFailed{#1}{Expected no second argument}%
  \else%
    \assertionSucceeded{#1}%
  \fi
}

% from file: mkivTests.tex after line: 600

\def\assertThirdArgument#1{%
  \ifthirdargument%
    \assertionSucceeded{#1}%
  \else%
    \assertionFailed{#1}{Expected a third argument}%
  \fi
}

% from file: mkivTests.tex after line: 650

\def\assertNoThirdArgument#1{%
  \ifthirdargument%
    \assertionFailed{#1}{Expected no third argument}%
  \else%
    \assertionSucceeded{#1}%
  \fi
}

% from file: mkivTests.tex after line: 700

\def\clearAllExpansionInfo{%
  \directlua{%
    thirddata.contests.clearAllExpansionInfo()
  }
}

% from file: mkivTests.tex after line: 700

\def\clearExpansionInfoFor#1{%
  \directlua{%
    thirddata.contests.clearExpansionInfoFor('#1')
  }
}

% from file: mkivTests.tex after line: 750

\def\startLoggingExpansions{%
  \directlua{thirddata.contests.setExpansionLogging(true)}
}
\def\stopLoggingExpansions{%
  \directlua{thirddata.contests.setExpansionLogging(false)}
}

% from file: mkivTests.tex after line: 850

\def\addMockResult#1#2{%
  \directlua{%
    thirddata.contests.addMockResult('#1', '#2')
  }
}

% from file: mkivTests.tex after line: 900

\def\traceTexMacro#1#2{%
  \directlua{%
    thirddata.contests.createMacro('#1', #2, 'tex', 'trace')
  }
}

\def\traceContextMacro#1#2{%
  \directlua{%
    thirddata.contests.createMacro('#1', #2, 'context', 'trace')
  }
}

\def\mockTexMacro#1#2{%
  \directlua{%
    thirddata.contests.createMacro('#1', #2, 'tex', 'mock')
  }
}

\def\mockContextMacro#1#2{%
  \directlua{%
    thirddata.contests.createMacro('#1', #2, 'context', 'mock')
  }
}

% from file: mkivTests.tex after line: 1300

\def\assertMacroExpanded#1#2{%
  \directlua{%
    thirddata.contests.assertMacroExpanded('#1', 1, '#2')
  }
}
\def\assertMacroNeverExpanded#1#2{%
  \directlua{%
    thirddata.contests.assertMacroNeverExpanded('#1', '#2')
  }
}
\def\assertMacroExpandedNTimes#1#2#3{%
  \directlua{%
    thirddata.contests.assertMacroExpanded('#1', #2, '#3')
  }
}

% from file: mkivTests.tex after line: 1400

\def\assertMacroNthArgumentOnMthExpansionMatches#1#2#3#4#5{%
  \directlua{%
    thirddata.contests.assertMacroArguments(
      '#1', #3, #2, '#4', '#5'
    )
  }
}

% from file: mkivTests.tex after line: 1500

\def\mockErrMessage{%
  \mockTexMacro{errmessage}{1}
}
\def\assertErrorThrown#1{%
  \assertMacroExpanded{errmessage}{#1}
}

% from file: luaTests.tex after line: 0

\def\showLuaValue#1#2{%
  \directlua{%
    thirddata.contests.showValue(#1, '#2')
  }
}

% from file: luaTests.tex after line: 0

\definetyping[LuaTest]
\setuptyping[LuaTest][option=lua]

\let\oldStopLuaTest=\stopLuaTest
\def\stopLuaTest{%
  \oldStopLuaTest%
  \directlua{thirddata.contests.addLuaTest('_typing_')}
}

\def\showLuaTest{%
  \directlua{thirddata.contests.showLuaTest()}
}

% from file: cTests.tex after line: 0

\usemodule[high-cpp]

\definetyping[CTest]
\setuptyping[CTest][option=cpp]

\let\oldStopCTest=\stopCTest
\def\stopCTest{%
  \oldStopCTest%
  \directlua{thirddata.contests.addCTest('_typing_')}
}

\def\createCTestFile[#1]{%
  \relax
}

% from file: conclusion.tex after line: 0

\protect \endinput